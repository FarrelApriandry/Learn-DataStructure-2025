# -*- coding: utf-8 -*-
"""2430506056_StrukDat_LinkedList.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yz_94Tj7ek-gRU_U2Hr3Xv9xnzA4xKc0
"""

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

head = Node(10)
head.next = Node(20)
head.next.next = Node(30)

print(head.data, head.next.data, head.next.next.data)  # Output: 10 20 30

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

head = Node(10)
new_node = Node(5)
new_node.next = head
head = new_node
print(head.data)  # Output: 5

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

head = Node(5)
head.next = Node(10)

head = head.next  # Deleting the first node

print(head.data)  # Output: 10

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

head = Node(1)
second = Node(2)
third = Node(3)

head.next = second
second.next = third
third.next = head  # Making it circular

# Traversing a circular linked list
current = head
for _ in range(5):  # Limiting iterations to avoid infinite loop
    print(current.data)
    current = current.next

# Output:
# 1
# 2
# 3
# 1
# 2

"""# **Latihan**

Latihan **1**
"""

from tabulate import tabulate

def get_last_digit(npm):
    """Mengambil digit terakhir dari NPM."""
    return int(str(npm)[-1])

def get_schedule():
    """Mengembalikan dictionary jadwal mata kuliah hari Jumat."""
    return {
        "Basis Data": "08:00 - 09:30",
        "Pemrograman Web": "10:00 - 11:30",
        "Struktur Data": "13:00 - 14:30",
        "Sistem Operasi": "15:00 - 16:30",
        "Jaringan Komputer": "17:00 - 18:30",
        "Kecerdasan Buatan": "19:00 - 20:30",
        "Cloud Computing": "20:30 - 22:00",
        "Data Science": "22:00 - 23:30",
        "Cyber Security": "23:30 - 01:00",
        "Machine Learning": "01:00 - 02:30"
    }

def display_schedule(npm):
    """Menampilkan jadwal berdasarkan digit terakhir NPM."""
    digit_terakhir = get_last_digit(npm)
    jadwal_jumat = get_schedule()

    if digit_terakhir == 0:
        print("Digit terakhir NPM adalah 0, jadwal diatur ke minimal 1 mata kuliah.")
        digit_terakhir = 1

    selected_courses = list(jadwal_jumat.items())[:digit_terakhir]

    table = tabulate(selected_courses, headers=["Mata Kuliah", "Jam"], tablefmt="grid")

    print("\n===== Jadwal Mata Kuliah Hari Jumat =====")
    print(table)

while True:
    try:
        npm = int(input("Masukkan NPM Anda: "))
        if npm <= 0:
            print("NPM tidak boleh negatif atau nol. Coba lagi.")
            continue
        break
    except ValueError:
        print("Input harus berupa angka. Coba lagi.")

display_schedule(npm)

"""Latihan **2**"""

class Node:
    def __init__(self, folder_name):
        self.folder_name = folder_name
        self.prev = None
        self.next = None

class FolderNavigation:
    def __init__(self):
        self.head = None
        self.current = None

    def add_folder(self, folder_name):
        new_node = Node(folder_name)
        if not self.head:
            self.head = new_node
            self.current = new_node
        else:
            temp = self.head
            while temp.next:
                temp = temp.next
            temp.next = new_node
            new_node.prev = temp

    def move_forward(self):
        if self.current and self.current.next:
            self.current = self.current.next
            print(f"Moved forward to: {self.current.folder_name}")
        else:
            print("No more folders ahead!")

    def move_backward(self):
        if self.current and self.current.prev:
            self.current = self.current.prev
            print(f"Moved back to: {self.current.folder_name}")
        else:
            print("No more previous folders!")

    def show_history(self):
        temp = self.head
        history = []
        while temp:
            if temp == self.current:
                history.append(f"[{temp.folder_name}]")
            else:
                history.append(temp.folder_name)
            temp = temp.next
        print(" -> ".join(history))

folders = ["C:", "Users", "Documents", "Projects", "Assignments", "Downloads"]
navigation = FolderNavigation()

for folder in folders:
    navigation.add_folder(folder)

print("\nFile Explorer Navigation:")
navigation.show_history()

while True:
    action = input("\nMove (f = forward, b = backward, q = quit): ").lower()
    if action == 'f':
        navigation.move_forward()
    elif action == 'b':
        navigation.move_backward()
    elif action == 'q':
        print("Exiting...")
        break
    else:
        print("Invalid input!")

    navigation.show_history()

"""Latihan **3**"""

class Node:
  def __init__(self, data):
    self.data = data
    self.next = None

class LinkedList:
  def __init__(self):
    self.head = None

  def add_at_beginning(self, data):
    new_node = Node(data)
    new.node.next = self.head
    self.head = new_node

  def add_at_end(self, data):
    new_node = Node(data)
    if not self.head:
      self.head = new_node
      return
    temp = self.head
    while temp.next:
      temp = temp.next
    temp.next = new_node

  def add_at_position(self, position, data):
    if position < 0:
      print("Posisi tidak valid!")
      return
    new_node = Node(data)
    if position == 0:
      self.add_at_beginning(data)
      return
    temp = self.head
    for _ in range(position - 1):
      if not temp.next:
        print("Posisi melebihi panjang daftar!")
        return
      temp = temp.next
    new_node.next = temp.next
    temp.next = new_node

  def delete_at_beginning(self):
    if not self.head:
      print("Daftar kosong!")
      return
    self.head = self.head.next

  def delete_at_end(self):
    if not self.head:
      print("Daftar kosong, tidak ada yang bisa dihapus!")
      return
    if not self.head.next:
      self.head = None
      return
    temp = self.head
    while temp.next.next:
      temp = temp.next
    temp.next = None

  def delete_at_position(self, position):
    if not self.head:
      print("Daftar kosong, tidak ada yang bisa dihapus!")
      return
    if position == 0:
      self.head = self.head.next
      return
    temp = self.head
    for _ in range(position - 1):
      if not temp or not temp.next :
        print("Posisi tidak ditemukan!")
        return
      temp = temp.next
    temp.next = temp.next.next

  def search(self, key):
    temp = self.head
    while temp:
      if temp.data == key:
        print(f"Elemen {key} ditemukan dalam daftar!")
        return
      temp = temp.next
    print(f"Elemen {key} tidak ditemukan dalam daftar!")

    def reverse(self):
      prev = none
      current = self.head
      while current:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
      self.head = prev

    def display(self):
      if not self.head:
        print("Daftar kosong!")
        return
      temp = self.head
      while temp:
        print(temp.data, end=" -> ")
        temp = temp.next
      print("None")

li = LinkedList()

num_elements = int(input("\nMasukkan jumlah awal elemendalam daftar: "))
for i in range(num_elements) :
  data = int(input(f"Masukkan elemen ke-{i+1}: "))
  li.add_at_end(data)

while True:
  print("\n Pilih operasi:")
  print("1. Tambah elemen di awal")
  print("2. Tambah elemen di akhir")
  print("3. Tambah elemen di posisi tertentu")
  print("4. Hapus elemen di awal")
  print("5. Hapus elemen di akhir")
  print("6. Hapus elemen di posisi tertentu")
  print("7. Cari elemen dalam daftar")
  print("8. Balikkan daftar")
  print("9. Tampilkan daftar")
  print("0. Keluar")

  choice = input("Masukkan pilihan Anda: ")

  if choice == 1:
    data = int(input("Masukkan elemen yang akan ditambahkan di awal: "))
    li.add_at_beginning(data)
  elif choice == 2:
    data = int(input("Masukkan elemen yang akan ditambahkan di akhir: "))
    li.add_at_end(data)
  elif choice == 3:
    position = int(input("Masukkan posisi untuk menambahkan data: "))
    data = int(input("Masukkan data yang ingin ditambahkan: "))
    li.add_at_position(position, data)
  elif choice == 4:
    li.delete_at_beginning()
  elif choice == 5:
    li.delete_at_end()
  elif choice == 6:
    position = int(input("Masukkan posisi elemen yang ingin dihapus: "))
    li.delete_at_position(position)
  elif choice == 7:
    key = int(input("Masukkan elemen yang ingin dicari: "))
    li.search(key)
  elif choice == 8:
    li.reverse()
    print("Daftar berhasil dibalik!")
  elif choice == 9:
    li.display()
  elif choice == 0:
    print("Terima kasih! Program selesai.")
    break
  else:
    print("\n Pilihan tidak valid. Silakan coba lagi.")

"""## Tugas

Tugas **1**
"""

from tabulate import tabulate

class Node:
    def __init__(self, name):
        self.name = name
        self.next = None

class CircularLinkedList:
    def __init__(self):
        self.head = None

    def add_guard(self, name):
        new_node = Node(name)
        if not self.head:
            self.head = new_node
            self.head.next = self.head
        else:
            temp = self.head
            while temp.next != self.head:
                temp = temp.next
            temp.next = new_node
            new_node.next = self.head

    def generate_schedule(self, days):
        if not self.head:
            print("No guards available!")
            return

        schedule = []
        current = self.head
        for day in range(1, days + 1):
            schedule.append([f"Day {day}", current.name])
            current = current.next

        print(tabulate(schedule, headers=["Day", "Guard"], tablefmt="grid"))

guards = []
for i in range(4):
    guard_name = input(f"Enter the name of guard {i + 1}: ")
    guards.append(guard_name)

cll = CircularLinkedList()
for guard in guards:
    cll.add_guard(guard)

print("\nSecurity Guard Schedule for 2 Weeks:")
cll.generate_schedule(14)

