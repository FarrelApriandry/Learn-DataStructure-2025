# -*- coding: utf-8 -*-
"""2430506056_StrukDat_Sorting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X9k2Ig1svnyS8oI6G_0KeFg2r03bb10_
"""

def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]  # Swap
    return arr

# Example
arr = [64, 34, 25, 12, 22, 11, 90]
print(bubble_sort(arr))

def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr

# Example
arr = [64, 25, 12, 22, 11]
print(selection_sort(arr))

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i-1
        while j >= 0 and key < arr[j]:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = key
    return arr

# Example
arr = [12, 11, 13, 5, 6]
print(insertion_sort(arr))

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1
    return arr

# Example
arr = [38, 27, 43, 3, 9, 82, 10]
print(merge_sort(arr))

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

# Example
arr = [10, 7, 8, 9, 1, 5]
print(quick_sort(arr))

"""# **Latihan Praktikum**

## **Latihan 1**
"""

def bubble_sort(arr):
  n = len(arr)
  for i in range(n - 1):
    for j in range(n - i - 1):
      if arr[j] > arr[j + 1]:
        arr[j], arr[j + 1] = arr[j + 1], arr[j]
  return arr

data = [64, 34, 25, 12, 22, 11, 90]
sorted_data = bubble_sort(data.copy())
print("Data sebelum sorting:", data)
print("Data setelah Bubble Sort:", sorted_data)

"""## **Latihan 2**"""

def selection_sort(arr):
  n = len(arr)
  for i in range(n - 1):
    min_index = i
    for j in range(i + 1, n):
      if arr[j] < arr[min_index]:
        min_index = j
    arr[i], arr[min_index] = arr[min_index], arr[i]
  return arr

data = [64, 25, 12, 22, 11]
sorted_data = selection_sort(data.copy())
print("Data sebelum sorting:", data)
print("Data setelah Selection Sort:", sorted_data)

"""## **Latihan 3**"""

def insertion_sort(arr):
  n = len(arr)
  for i in range(1, n):
    key = arr[i]
    j = i - 1
    while j >= 0 and arr[j] > key:
      arr[j + 1] = arr[j]
      j -= 1
    arr[j + 1] = key
  return arr

data = [64, 34, 25, 12, 22, 11, 90]
sorted_data = insertion_sort(data.copy())
print("Data sebelum sorting:", data)
print("Data setelah Insertion Sort:", sorted_data)

"""## **Latihan 4**"""

def merge_sort(arr):
  if len(arr) > 1:
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    merge_sort(left_half)
    merge_sort(right_half)

    i = j = k = 0

    while i < len(left_half) and j < len(right_half):
      if left_half[i] < right_half[j]:
        arr[k] = left_half[i]
        i += 1
      else:
        arr[k] = right_half[j]
        j += 1
      k += 1

    while i < len(left_half):
      arr[k] = left_half[i]
      i += 1
      k += 1

    while j < len(right_half):
      arr[k] = right_half[j]
      j += 1
      k += 1

  return arr

data = [64, 25, 12, 22, 11]
sorted_data = merge_sort(data.copy())
print("Data sebelum sorting:", data)
print("Data setelah Merge Sort:", sorted_data)

"""## **Latihan 5**"""

def quick_sort(arr):
  if len(arr) <= 1:
    return arr
  pivot = arr[len(arr) // 2]
  left = [x for x in arr if x < pivot]
  middle = [x for x in arr if x == pivot]
  right = [x for x in arr if x > pivot]
  return quick_sort(left) + middle + quick_sort(right)

data = [64, 25, 12, 22, 11]
sorted_data = quick_sort(data.copy())
print("Data sebelum sorting:", data)
print("Data setelah Quick Sort:", sorted_data)

"""# **Tugas Praktikum**

## **Tugas 1 | Optimasi Pencarian Produk di Marketplace**
"""

import os
import pandas as pd
from tabulate import tabulate

def bubble_sort(products, descending=False):
    n = len(products)
    for i in range(n - 1):
        for j in range(n - i - 1):
            if (products[j]["Price"] > products[j + 1]["Price"]) == (not descending):
                products[j], products[j + 1] = products[j + 1], products[j]

def search_products(products, keyword, sort_by):
    filtered = [p for p in products if keyword.lower() in p["Name"].lower()]

    if sort_by == "asc":
        bubble_sort(filtered, descending=False)
    else:
        bubble_sort(filtered, descending=True)

    return filtered

def display_products(products):
    if not products:
        print("No products found!\n")
        return
    df = pd.DataFrame(products)
    df["Price"] = df["Price"].apply(lambda x: f"${x}")
    df["Rating"] = df["Rating"].apply(lambda x: f"{x}")
    print(tabulate(df, headers='keys', tablefmt="fancy_grid", showindex=False))

def main():
    products = [
        {"Brand": "Nike", "Name": "Nike Air Force 1", "Price": 120, "Rating": 4.8},
        {"Brand": "Adidas", "Name": "Adidas Ultraboost", "Price": 180, "Rating": 4.7},
        {"Brand": "Puma", "Name": "Puma RS-X", "Price": 100, "Rating": 4.5},
        {"Brand": "New Balance", "Name": "NB 550", "Price": 150, "Rating": 4.6},
        {"Brand": "Converse", "Name": "Converse Chuck 70", "Price": 90, "Rating": 4.3},
        {"Brand": "Vans", "Name": "Vans Old Skool", "Price": 80, "Rating": 4.4}
    ]

    while True:
        os.system("cls" if os.name == "nt" else "clear")
        print("\n WELCOME TO CLOTHING BRAND MARKETPLACE \n")
        keyword = input("Search for a product: ")
        sort_by = input("Sort by price (asc/desc): ").strip().lower()

        sorted_products = search_products(products, keyword, sort_by)
        display_products(sorted_products)

        if input("\nSearch again? (y/n): ").strip().lower() != "y":
            break

if __name__ == "__main__":
    main()